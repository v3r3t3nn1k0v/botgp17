import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('doctors_ratings.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS ratings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        doctor_id INTEGER NOT NULL,
        doctor_name TEXT NOT NULL,
        visited BOOLEAN NOT NULL,
        rating INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def save_rating(user_id: int, doctor_id: int, doctor_name: str, visited: bool, rating: int = None):
    conn = sqlite3.connect('doctors_ratings.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO ratings (user_id, doctor_id, doctor_name, visited, rating)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, doctor_id, doctor_name, visited, rating))
    
    conn.commit()
    conn.close()

def get_doctor_stats(doctor_id: int):
    conn = sqlite3.connect('doctors_ratings.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
    cursor.execute('''
    SELECT AVG(rating), COUNT(rating) 
    FROM ratings 
    WHERE doctor_id = ? AND visited = 1 AND rating IS NOT NULL
    ''', (doctor_id,))
    
    avg_rating, count = cursor.fetchone()
    conn.close()
    
    return {
        'avg_rating': round(avg_rating, 1) if avg_rating else None,
        'rating_count': count or 0
    }

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏
def get_visit_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç"))
    return keyboard

def get_rating_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3"))
    keyboard.row(KeyboardButton(text="4"), KeyboardButton(text="5"))
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RatingStates(StatesGroup):
    waiting_for_visit_answer = State()
    waiting_for_rating = State()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—á–∞
@router.callback_query(F.data.startswith("doctor_"))
async def process_doctor_selection(callback: types.CallbackQuery, state: FSMContext):
    doctor_id = int(callback.data.split("_")[1])
    doctors = await doctor_schedule.get_all_doctors()
    doctor = next((doc for doc in doctors if int(doc["id"]) == doctor_id), None)
    
    if doctor:
        await state.update_data(doctor_id=doctor_id, doctor_name=doctor['name'])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = await doctor_schedule.get_schedule(doctor['name'])
        if schedule:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ü–µ–Ω–∫–∞–º
            stats = get_doctor_stats(doctor_id)
            stats_text = ""
            if stats['avg_rating']:
                stats_text = f"\n\n‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['avg_rating']} (–Ω–∞ –æ—Å–Ω–æ–≤–µ {stats['rating_count']} –æ—Ü–µ–Ω–æ–∫)"
            
            response = (
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {schedule['name']}\n"
                f"üìå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {schedule['specialization']}\n\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"–ü–Ω: {schedule['schedule']['–ø–Ω']}\n"
                f"–í—Ç: {schedule['schedule']['–≤—Ç']}\n"
                f"–°—Ä: {schedule['schedule']['—Å—Ä']}\n"
                f"–ß—Ç: {schedule['schedule']['—á—Ç']}\n"
                f"–ü—Ç: {schedule['schedule']['–ø—Ç']}\n"
                f"–°–±: {schedule['schedule']['—Å–±']}\n"
                f"–í—Å: {schedule['schedule']['–≤—Å']}"
                f"{stats_text}"
            )
            
            await callback.message.edit_text(response)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å –≤—Ä–∞—á–∞
            await callback.message.answer(
                "–í—ã –ø–æ—Å–µ—â–∞–ª–∏ —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞? –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–∞:",
                reply_markup=get_visit_keyboard()
            )
            await state.set_state(RatingStates.waiting_for_visit_answer)
        else:
            await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Ä–∞—á–∞ {doctor['name']}")
    else:
        await callback.message.edit_text("–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤—Ä–∞—á–∞
@router.message(RatingStates.waiting_for_visit_answer)
async def process_visit_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if message.text.lower() == '–¥–∞':
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–∞ (–æ—Ç 1 –¥–æ 5):",
            reply_markup=get_rating_keyboard()
        )
        await state.set_state(RatingStates.waiting_for_rating)
    elif message.text.lower() == '–Ω–µ—Ç':
        save_rating(
            user_id=message.from_user.id,
            doctor_id=data['doctor_id'],
            doctor_name=data['doctor_name'],
            visited=False
        )
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –ï—Å–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≤—Ä–∞—á–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–∞.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'")

@router.message(RatingStates.waiting_for_rating)
async def process_rating(message: types.Message, state: FSMContext):
    if message.text.isdigit() and 1 <= int(message.text) <= 5:
        data = await state.get_data()
        
        save_rating(
            user_id=message.from_user.id,
            doctor_id=data['doctor_id'],
            doctor_name=data['doctor_name'],
            visited=True,
            rating=int(message.text)
        )
        
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5")