import logging
from typing import Dict, List
import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import Router
from google.oauth2.service_account import Credentials
from datetime import datetime
import asyncio
import platform
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è Windows
if platform.system() == "Windows":
    if sys.version_info >= (3, 8):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7764187384:AAHNjQIu7soAzDzgbRI6qfLM0czGekjhN-k"
GOOGLE_SHEETS_CREDENTIALS = "credentials.json"  # –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∏–∂–µ)
GOOGLE_SHEET_KEY = "1USOCOY37WTye411sMGmCDWUfx0IXRt7tCYfDVwxtRL0"     # ID –≤–∞—à–µ–π Google —Ç–∞–±–ª–∏—Ü—ã


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    doctor_name = State()
    select_doctor = State()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
class DoctorSchedule:
    def __init__(self):
        self.sheet = self.connect_to_google_sheets()
        self.last_update = None
        self.doctors_cache = []
        
    def connect_to_google_sheets(self):
        try:
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
            creds = Credentials.from_service_account_file(GOOGLE_SHEETS_CREDENTIALS, scopes=scope)
            client = gspread.authorize(creds)
            return client.open_by_key(GOOGLE_SHEET_KEY).sheet1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            return None
    
    async def get_all_doctors(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –∏–∑ Google Sheets"""
       
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
            result = [] 
            records = self.sheet.get_all_records()
            print(records)
            for record in records:
                print(record['—Ñ–∏–æ –≤—Ä–∞—á–∞'])
                currdoc = { 'id': record['id –≤—Ä–∞—á–∞'],
                    'name': record['—Ñ–∏–æ –≤—Ä–∞—á–∞'],
                    'specialization': record['—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è']}
                print(currdoc)
                result.append(currdoc)
                currdoc = {}
            print(result)
            return result
        except Exception as e:
            logger.error(f"Error getting doctors list: {e}")
            return []
    
    async def get_schedule(self, doctor_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞ –∏–∑ Google Sheets"""
        try:
            records = self.sheet.get_all_records()
            for row in records:
                if row['—Ñ–∏–æ –≤—Ä–∞—á–∞'].lower() == doctor_name.lower():
                    return await self.format_schedule(row)
            return None
        except Exception as e:
            logger.error(f"Error getting schedule: {e}")
            return None
    
    async def format_schedule(self, row: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        days = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
        schedule = {
            'id': row['id –≤—Ä–∞—á–∞'],
            'name': row['—Ñ–∏–æ –≤—Ä–∞—á–∞'],
            'specialization': row['—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'],
            'schedule': {}
        }
        
        for day in days:
            schedule['schedule'][day] = row.get(day, '–≤—ã—Ö–æ–¥–Ω–æ–π')
        
        return schedule
    
    async def get_today_schedule(self, doctor_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        schedule = await self.get_schedule(doctor_name)
        if not schedule:
            return None
            
        today = datetime.now().weekday()  # 0-–ø–Ω, 1-–≤—Ç, ..., 6-–≤—Å
        days = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–≤—Å']
        today_day = days[today]
        
        return {
            'id': schedule['id'],
            'name': schedule['name'],
            'specialization': schedule['specialization'],
            'today': today_day,
            'hours': schedule['schedule'][today_day]
        }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
doctor_schedule = DoctorSchedule()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π"),
        types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    )
    builder.row(
        types.KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏"),
        types.KeyboardButton(text="–ü–æ–º–æ—â—å")
    )
    return builder.as_markup(resize_keyboard=True)

async def get_doctors_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Ä–∞—á–µ–π"""
    doctors = await doctor_schedule.get_all_doctors()
    builder = InlineKeyboardBuilder()
    print(f"–ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–∞—á–µ–π: {len(doctors)}")
    for doctor in doctors:
        print(f"–í—Ä–∞—á: {doctor['name']}, ID: {doctor['id']}")
    for doctor in doctors:
        builder.button(
            text=f"{doctor['name']} ({doctor['specialization']})", 
            callback_data=f"doctor_{doctor['id']}"
        )
    
    builder.adjust(1)
    print(builder.as_markup())
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
@router.message(Command("help"))
async def send_welcome(message: types.Message):
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n"
        "–Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:\n"
        "- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π\n"
        "- –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "- –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏"
    )
    await message.reply(welcome_text, reply_markup=get_main_keyboard())

@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π")
async def schedule_handler(message: types.Message):
    keyboard = await get_doctors_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("doctor_"))
async def process_doctor_selection(callback: types.CallbackQuery):
    doctor_id = int(callback.data.split("_")[1])
    doctors = await doctor_schedule.get_all_doctors()
    doctorInfo = {}
    for doctor in doctors:
        if int(doctor["id"]) == doctor_id:
            doctorInfo = doctor
            break
    
    if doctor:
        print(doctorInfo)
        schedule = await doctor_schedule.get_schedule(doctorInfo['name'])
        if schedule:
            response = (
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {schedule['name']}\n"
                f"üìå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {schedule['specialization']}\n\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"–ü–Ω: {schedule['schedule']['–ø–Ω']}\n"
                f"–í—Ç: {schedule['schedule']['–≤—Ç']}\n"
                f"–°—Ä: {schedule['schedule']['—Å—Ä']}\n"
                f"–ß—Ç: {schedule['schedule']['—á—Ç']}\n"
                f"–ü—Ç: {schedule['schedule']['–ø—Ç']}\n"
                f"–°–±: {schedule['schedule']['—Å–±']}\n"
                f"–í—Å: {schedule['schedule']['–≤—Å']}"
            )
        else:
            response = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Ä–∞—á–∞ {doctor['name']}"
    else:
        response = "–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await callback.message.edit_text(response)
    await callback.answer()

@router.message(F.text == "–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def today_schedule_handler(message: types.Message):
    keyboard = await get_doctors_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("doctor_"))
async def process_doctor_selection(callback: types.CallbackQuery):
    doctor_id = int(callback.data.split("_")[1])
    doctors = await doctor_schedule.get_all_doctors()
    doctorInfo = {}
    for doctor in doctors:
        if int(doctor["id"]) == doctor_id:
            doctorInfo = doctor
            break
    
    if doctorInfo:
        print(doctorInfo)
        schedule = await doctor_schedule.get_schedule(doctorInfo['name'])
        if schedule:
            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ì–æ—Ä–∑–¥—Ä–∞–≤
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ –ì–æ—Ä–∑–¥—Ä–∞–≤",
                url="https://gorzdrav.spb.ru/"
            ))
            
            response = (
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {schedule['name']}\n"
                f"üìå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {schedule['specialization']}\n\n"
                "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
                f"–ü–Ω: {schedule['schedule']['–ø–Ω']}\n"
                f"–í—Ç: {schedule['schedule']['–≤—Ç']}\n"
                f"–°—Ä: {schedule['schedule']['—Å—Ä']}\n"
                f"–ß—Ç: {schedule['schedule']['—á—Ç']}\n"
                f"–ü—Ç: {schedule['schedule']['–ø—Ç']}\n"
                f"–°–±: {schedule['schedule']['—Å–±']}\n"
                f"–í—Å: {schedule['schedule']['–≤—Å']}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ –ü–æ—Ä—Ç–∞–ª –ì–æ—Ä–∑–¥—Ä–∞–≤:"
            )
            
            await callback.message.edit_text(response, reply_markup=builder.as_markup())
        else:
            await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Ä–∞—á–∞ {doctorInfo['name']}")
    else:
        await callback.message.edit_text("–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()

@router.callback_query(F.data.startswith("doctor_"))
async def process_today_schedule(callback: types.CallbackQuery):
    doctor_id = callback.data.split("_")[1]
    doctors = await doctor_schedule.get_all_doctors()
    doctor = next((doc for doc in doctors if doc['id'] == doctor_id), None)
    
    if doctor:
        schedule = await doctor_schedule.get_today_schedule(doctor['name'])
        if schedule:
            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ì–æ—Ä–∑–¥—Ä–∞–≤
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ –ì–æ—Ä–∑–¥—Ä–∞–≤",
                url="https://gorzdrav.spb.ru/"
            ))
            
            response = (
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {schedule['name']}\n"
                f"üìå –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {schedule['specialization']}\n\n"
                f"üìÖ –°–µ–≥–æ–¥–Ω—è ({schedule['today']}): {schedule['hours']}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º —á–µ—Ä–µ–∑ –ü–æ—Ä—Ç–∞–ª –ì–æ—Ä–∑–¥—Ä–∞–≤:"
            )
            
            await callback.message.edit_text(response, reply_markup=builder.as_markup())
        else:
            await callback.message.edit_text(f"–í—Ä–∞—á {doctor['name']} —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç")
    else:
        await callback.message.edit_text("–í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()

@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏")
async def contacts_handler(message: types.Message):
    response_text = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä: +7 (812) 246-55-55\n"
        "üè• –ê–¥—Ä–µ—Å: –ø—Ä. –ú–µ—Ç–∞–ª–ª–∏—Å—Ç–æ–≤, –¥. 56\n"
        "üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ø–Ω-–ø—Ç 8:00-20:00, —Å–± 9:00-15:00\n"
        "üåê –°–∞–π—Ç: https://p17-spb.ru/"
    )
    await message.reply(response_text)

@router.message()
async def unknown_message(message: types.Message):
    await message.reply(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())